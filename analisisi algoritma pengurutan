#include <iostream>
#include <chrono>
#include <algorithm> 
#include <cstdlib> 
#include <ctime> 

using namespace std;
using namespace std::chrono;

void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

void insertionSort(int arr[], int n) {
    for (int i = 1; i < n; i++) {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}

void selectionSort(int arr[], int n) {
    for (int i = 0; i < n-1; i++) {
        int min_idx = i;
        for (int j = i+1; j < n; j++) {
            if (arr[j] < arr[min_idx])
                min_idx = j;
        }
        int temp = arr[min_idx];
        arr[min_idx] = arr[i];
        arr[i] = temp;
    }
}

void merge(int arr[], int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;
    int* L = new int[n1];
    int* R = new int[n2];
    for (int i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];
    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
    delete[] L;
    delete[] R;
}

void mergeSort(int arr[], int l, int r) {
    if (l >= r)
        return;
    int m = l + (r - l) / 2;
    mergeSort(arr, l, m);
    mergeSort(arr, m + 1, r);
    merge(arr, l, m, r);
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = (low - 1);
    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
    int temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;
    return (i + 1);
}

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

template<typename Func, typename... Args>
double measureTime(Func func, Args&&... args) {
    auto start = high_resolution_clock::now();
    func(forward<Args>(args)...);
    auto end = high_resolution_clock::now();
    duration<double, micro> elapsed = end - start;
    return elapsed.count();
}

void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++)
        cout << arr[i] << " ";
    cout << endl;
}

int main() {
    const int sizes[] = {10, 100, 500, 1000, 10000};
    const int numSizes = sizeof(sizes) / sizeof(sizes[0]);
    const string orders[] = {"random", "sorted", "reversed"};
    const int numOrders = sizeof(orders) / sizeof(orders[0]);

    srand(time(0));

    for (int i = 0; i < numSizes; i++) {
        int n = sizes[i];
        int* arr = new int[n];

        for (int j = 0; j < n; j++)
            arr[j] = rand() % 1000;

        for (int order = 0; order < numOrders; order++) {
            int* tempArr = new int[n];

            if (orders[order] == "sorted") {
                sort(arr, arr + n);
            } else if (orders[order] == "reversed") {
                sort(arr, arr + n, greater<int>());
            }

            cout << "Array order: " << orders[order] << ", size: " << n << endl;

            copy(arr, arr + n, tempArr);
            cout << "Bubble Sort time: " << measureTime(bubbleSort, tempArr, n) << " microseconds. Space: O(1)" << endl;

            copy(arr, arr + n, tempArr);
            cout << "Insertion Sort time: " << measureTime(insertionSort, tempArr, n) << " microseconds. Space: O(1)" << endl;

            copy(arr, arr + n, tempArr);
            cout << "Selection Sort time: " << measureTime(selectionSort, tempArr, n) << " microseconds. Space: O(1)" << endl;

            copy(arr, arr + n, tempArr);
            cout << "Merge Sort time: " << measureTime(mergeSort, tempArr, 0, n - 1) << " microseconds. Space: O(n)" << endl;

            copy(arr, arr + n, tempArr);
            cout << "Quick Sort time: " << measureTime(quickSort, tempArr, 0, n - 1) << " microseconds. Space: O(log n) (for recursion)" << endl;

            delete[] tempArr;
        }

        delete[] arr;
    }

    return 0;
}
